// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: transaction.service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type handleUnaryCall, Metadata, type UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "gamehub.proto.client.service";

export interface WithdrawRequest {
  $type: "gamehub.proto.client.service.WithdrawRequest";
  readonly playerId?: string | undefined;
  readonly currency?: string | undefined;
  readonly realAmount?: number | undefined;
  readonly bonusAmount?: number | undefined;
  readonly gameIdentity?: string | undefined;
  readonly roundId?: string | undefined;
  readonly transactionId?: string | undefined;
  readonly bonusCode?: string | undefined;
}

export interface WithdrawResult {
  $type: "gamehub.proto.client.service.WithdrawResult";
  readonly transactionId?: string | undefined;
}

export interface DepositRequest {
  $type: "gamehub.proto.client.service.DepositRequest";
  readonly playerId?: string | undefined;
  readonly currency?: string | undefined;
  readonly realAmount?: number | undefined;
  readonly bonusAmount?: number | undefined;
  readonly gameIdentity?: string | undefined;
  readonly roundId?: string | undefined;
  readonly transactionId?: string | undefined;
  readonly bonusCode?: string | undefined;
  readonly roundEnd?: boolean | undefined;
}

export interface DepositResult {
  $type: "gamehub.proto.client.service.DepositResult";
  readonly transactionId?: string | undefined;
}

export interface RollbackRequest {
  $type: "gamehub.proto.client.service.RollbackRequest";
  readonly playerId?: string | undefined;
  readonly roundId?: string | undefined;
  readonly transactionId?: string | undefined;
}

export interface RollbackResult {
  $type: "gamehub.proto.client.service.RollbackResult";
  readonly transactionId?: string | undefined;
}

export const GAMEHUB_PROTO_CLIENT_SERVICE_PACKAGE_NAME = "gamehub.proto.client.service";

function createBaseWithdrawRequest(): WithdrawRequest {
  return { $type: "gamehub.proto.client.service.WithdrawRequest" };
}

export const WithdrawRequest: MessageFns<WithdrawRequest, "gamehub.proto.client.service.WithdrawRequest"> = {
  $type: "gamehub.proto.client.service.WithdrawRequest" as const,

  encode(message: WithdrawRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== undefined && message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.currency !== undefined && message.currency !== "") {
      writer.uint32(18).string(message.currency);
    }
    if (message.realAmount !== undefined && message.realAmount !== 0) {
      writer.uint32(24).int32(message.realAmount);
    }
    if (message.bonusAmount !== undefined && message.bonusAmount !== 0) {
      writer.uint32(32).int32(message.bonusAmount);
    }
    if (message.gameIdentity !== undefined && message.gameIdentity !== "") {
      writer.uint32(42).string(message.gameIdentity);
    }
    if (message.roundId !== undefined && message.roundId !== "") {
      writer.uint32(50).string(message.roundId);
    }
    if (message.transactionId !== undefined && message.transactionId !== "") {
      writer.uint32(58).string(message.transactionId);
    }
    if (message.bonusCode !== undefined) {
      writer.uint32(66).string(message.bonusCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WithdrawRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWithdrawRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.realAmount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.bonusAmount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.gameIdentity = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.roundId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.bonusCode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseWithdrawResult(): WithdrawResult {
  return { $type: "gamehub.proto.client.service.WithdrawResult" };
}

export const WithdrawResult: MessageFns<WithdrawResult, "gamehub.proto.client.service.WithdrawResult"> = {
  $type: "gamehub.proto.client.service.WithdrawResult" as const,

  encode(message: WithdrawResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transactionId !== undefined && message.transactionId !== "") {
      writer.uint32(10).string(message.transactionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WithdrawResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWithdrawResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDepositRequest(): DepositRequest {
  return { $type: "gamehub.proto.client.service.DepositRequest" };
}

export const DepositRequest: MessageFns<DepositRequest, "gamehub.proto.client.service.DepositRequest"> = {
  $type: "gamehub.proto.client.service.DepositRequest" as const,

  encode(message: DepositRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== undefined && message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.currency !== undefined && message.currency !== "") {
      writer.uint32(18).string(message.currency);
    }
    if (message.realAmount !== undefined && message.realAmount !== 0) {
      writer.uint32(24).int32(message.realAmount);
    }
    if (message.bonusAmount !== undefined && message.bonusAmount !== 0) {
      writer.uint32(32).int32(message.bonusAmount);
    }
    if (message.gameIdentity !== undefined && message.gameIdentity !== "") {
      writer.uint32(42).string(message.gameIdentity);
    }
    if (message.roundId !== undefined && message.roundId !== "") {
      writer.uint32(50).string(message.roundId);
    }
    if (message.transactionId !== undefined && message.transactionId !== "") {
      writer.uint32(58).string(message.transactionId);
    }
    if (message.bonusCode !== undefined) {
      writer.uint32(66).string(message.bonusCode);
    }
    if (message.roundEnd !== undefined && message.roundEnd !== false) {
      writer.uint32(72).bool(message.roundEnd);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DepositRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDepositRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.realAmount = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.bonusAmount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.gameIdentity = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.roundId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.bonusCode = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.roundEnd = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseDepositResult(): DepositResult {
  return { $type: "gamehub.proto.client.service.DepositResult" };
}

export const DepositResult: MessageFns<DepositResult, "gamehub.proto.client.service.DepositResult"> = {
  $type: "gamehub.proto.client.service.DepositResult" as const,

  encode(message: DepositResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transactionId !== undefined && message.transactionId !== "") {
      writer.uint32(10).string(message.transactionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DepositResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDepositResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseRollbackRequest(): RollbackRequest {
  return { $type: "gamehub.proto.client.service.RollbackRequest" };
}

export const RollbackRequest: MessageFns<RollbackRequest, "gamehub.proto.client.service.RollbackRequest"> = {
  $type: "gamehub.proto.client.service.RollbackRequest" as const,

  encode(message: RollbackRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== undefined && message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.roundId !== undefined && message.roundId !== "") {
      writer.uint32(18).string(message.roundId);
    }
    if (message.transactionId !== undefined && message.transactionId !== "") {
      writer.uint32(26).string(message.transactionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RollbackRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRollbackRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.roundId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseRollbackResult(): RollbackResult {
  return { $type: "gamehub.proto.client.service.RollbackResult" };
}

export const RollbackResult: MessageFns<RollbackResult, "gamehub.proto.client.service.RollbackResult"> = {
  $type: "gamehub.proto.client.service.RollbackResult" as const,

  encode(message: RollbackResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transactionId !== undefined && message.transactionId !== "") {
      writer.uint32(10).string(message.transactionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RollbackResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRollbackResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface TransactionServiceClient {
  withdraw(request: WithdrawRequest, metadata: Metadata, ...rest: any): Observable<WithdrawResult>;

  deposit(request: DepositRequest, metadata: Metadata, ...rest: any): Observable<DepositResult>;

  rollback(request: RollbackRequest, metadata: Metadata, ...rest: any): Observable<RollbackResult>;
}

export interface TransactionServiceController {
  withdraw(
    request: WithdrawRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<WithdrawResult> | Observable<WithdrawResult> | WithdrawResult;

  deposit(
    request: DepositRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<DepositResult> | Observable<DepositResult> | DepositResult;

  rollback(
    request: RollbackRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<RollbackResult> | Observable<RollbackResult> | RollbackResult;
}

export function TransactionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["withdraw", "deposit", "rollback"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TransactionService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TransactionService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TRANSACTION_SERVICE_NAME = "TransactionService";

export type TransactionServiceService = typeof TransactionServiceService;
export const TransactionServiceService = {
  withdraw: {
    path: "/gamehub.proto.client.service.TransactionService/Withdraw",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: WithdrawRequest) => Buffer.from(WithdrawRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => WithdrawRequest.decode(value),
    responseSerialize: (value: WithdrawResult) => Buffer.from(WithdrawResult.encode(value).finish()),
    responseDeserialize: (value: Buffer) => WithdrawResult.decode(value),
  },
  deposit: {
    path: "/gamehub.proto.client.service.TransactionService/Deposit",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DepositRequest) => Buffer.from(DepositRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DepositRequest.decode(value),
    responseSerialize: (value: DepositResult) => Buffer.from(DepositResult.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DepositResult.decode(value),
  },
  rollback: {
    path: "/gamehub.proto.client.service.TransactionService/Rollback",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RollbackRequest) => Buffer.from(RollbackRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RollbackRequest.decode(value),
    responseSerialize: (value: RollbackResult) => Buffer.from(RollbackResult.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RollbackResult.decode(value),
  },
} as const;

export interface TransactionServiceServer extends UntypedServiceImplementation {
  withdraw: handleUnaryCall<WithdrawRequest, WithdrawResult>;
  deposit: handleUnaryCall<DepositRequest, DepositResult>;
  rollback: handleUnaryCall<RollbackRequest, RollbackResult>;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
