// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: session.service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type handleUnaryCall, Metadata, type UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "gamehub.proto.client.service";

export interface AuthenticateRequest {
  $type: "gamehub.proto.client.service.AuthenticateRequest";
  readonly sessionToken?: string | undefined;
}

export interface AuthenticateResult {
  $type: "gamehub.proto.client.service.AuthenticateResult";
  readonly playerId?: string | undefined;
  readonly playerName?: string | undefined;
  readonly currency?: string | undefined;
}

export interface BalanceRequest {
  $type: "gamehub.proto.client.service.BalanceRequest";
  readonly playerId?: string | undefined;
  readonly currency?: string | undefined;
}

export interface BalanceResult {
  $type: "gamehub.proto.client.service.BalanceResult";
  readonly realAmount?: number | undefined;
  readonly bonusAmount?: number | undefined;
}

export interface ActiveBalanceRequest {
  $type: "gamehub.proto.client.service.ActiveBalanceRequest";
  readonly playerId?: string | undefined;
}

export interface ActiveBalanceResult {
  $type: "gamehub.proto.client.service.ActiveBalanceResult";
  readonly realAmount?: number | undefined;
  readonly bonusAmount?: number | undefined;
  readonly currency?: string | undefined;
}

export const GAMEHUB_PROTO_CLIENT_SERVICE_PACKAGE_NAME = "gamehub.proto.client.service";

function createBaseAuthenticateRequest(): AuthenticateRequest {
  return { $type: "gamehub.proto.client.service.AuthenticateRequest" };
}

export const AuthenticateRequest: MessageFns<AuthenticateRequest, "gamehub.proto.client.service.AuthenticateRequest"> =
  {
    $type: "gamehub.proto.client.service.AuthenticateRequest" as const,

    encode(message: AuthenticateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.sessionToken !== undefined && message.sessionToken !== "") {
        writer.uint32(10).string(message.sessionToken);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): AuthenticateRequest {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseAuthenticateRequest() as any;
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.sessionToken = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },
  };

function createBaseAuthenticateResult(): AuthenticateResult {
  return { $type: "gamehub.proto.client.service.AuthenticateResult" };
}

export const AuthenticateResult: MessageFns<AuthenticateResult, "gamehub.proto.client.service.AuthenticateResult"> = {
  $type: "gamehub.proto.client.service.AuthenticateResult" as const,

  encode(message: AuthenticateResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== undefined && message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.playerName !== undefined && message.playerName !== "") {
      writer.uint32(18).string(message.playerName);
    }
    if (message.currency !== undefined && message.currency !== "") {
      writer.uint32(26).string(message.currency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthenticateResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthenticateResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseBalanceRequest(): BalanceRequest {
  return { $type: "gamehub.proto.client.service.BalanceRequest" };
}

export const BalanceRequest: MessageFns<BalanceRequest, "gamehub.proto.client.service.BalanceRequest"> = {
  $type: "gamehub.proto.client.service.BalanceRequest" as const,

  encode(message: BalanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== undefined && message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.currency !== undefined && message.currency !== "") {
      writer.uint32(18).string(message.currency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BalanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBalanceRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseBalanceResult(): BalanceResult {
  return { $type: "gamehub.proto.client.service.BalanceResult" };
}

export const BalanceResult: MessageFns<BalanceResult, "gamehub.proto.client.service.BalanceResult"> = {
  $type: "gamehub.proto.client.service.BalanceResult" as const,

  encode(message: BalanceResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.realAmount !== undefined && message.realAmount !== 0) {
      writer.uint32(8).int32(message.realAmount);
    }
    if (message.bonusAmount !== undefined && message.bonusAmount !== 0) {
      writer.uint32(16).int32(message.bonusAmount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BalanceResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBalanceResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.realAmount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.bonusAmount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseActiveBalanceRequest(): ActiveBalanceRequest {
  return { $type: "gamehub.proto.client.service.ActiveBalanceRequest" };
}

export const ActiveBalanceRequest: MessageFns<
  ActiveBalanceRequest,
  "gamehub.proto.client.service.ActiveBalanceRequest"
> = {
  $type: "gamehub.proto.client.service.ActiveBalanceRequest" as const,

  encode(message: ActiveBalanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== undefined && message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveBalanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveBalanceRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseActiveBalanceResult(): ActiveBalanceResult {
  return { $type: "gamehub.proto.client.service.ActiveBalanceResult" };
}

export const ActiveBalanceResult: MessageFns<ActiveBalanceResult, "gamehub.proto.client.service.ActiveBalanceResult"> =
  {
    $type: "gamehub.proto.client.service.ActiveBalanceResult" as const,

    encode(message: ActiveBalanceResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.realAmount !== undefined && message.realAmount !== 0) {
        writer.uint32(8).int32(message.realAmount);
      }
      if (message.bonusAmount !== undefined && message.bonusAmount !== 0) {
        writer.uint32(16).int32(message.bonusAmount);
      }
      if (message.currency !== undefined && message.currency !== "") {
        writer.uint32(26).string(message.currency);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): ActiveBalanceResult {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseActiveBalanceResult() as any;
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.realAmount = reader.int32();
            continue;
          }
          case 2: {
            if (tag !== 16) {
              break;
            }

            message.bonusAmount = reader.int32();
            continue;
          }
          case 3: {
            if (tag !== 26) {
              break;
            }

            message.currency = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },
  };

export interface SessionServiceClient {
  authenticate(request: AuthenticateRequest, metadata: Metadata, ...rest: any): Observable<AuthenticateResult>;

  balance(request: BalanceRequest, metadata: Metadata, ...rest: any): Observable<BalanceResult>;

  activeBalance(request: ActiveBalanceRequest, metadata: Metadata, ...rest: any): Observable<ActiveBalanceResult>;
}

export interface SessionServiceController {
  authenticate(
    request: AuthenticateRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<AuthenticateResult> | Observable<AuthenticateResult> | AuthenticateResult;

  balance(
    request: BalanceRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<BalanceResult> | Observable<BalanceResult> | BalanceResult;

  activeBalance(
    request: ActiveBalanceRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<ActiveBalanceResult> | Observable<ActiveBalanceResult> | ActiveBalanceResult;
}

export function SessionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["authenticate", "balance", "activeBalance"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SessionService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SessionService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SESSION_SERVICE_NAME = "SessionService";

export type SessionServiceService = typeof SessionServiceService;
export const SessionServiceService = {
  authenticate: {
    path: "/gamehub.proto.client.service.SessionService/Authenticate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AuthenticateRequest) => Buffer.from(AuthenticateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AuthenticateRequest.decode(value),
    responseSerialize: (value: AuthenticateResult) => Buffer.from(AuthenticateResult.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthenticateResult.decode(value),
  },
  balance: {
    path: "/gamehub.proto.client.service.SessionService/Balance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: BalanceRequest) => Buffer.from(BalanceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => BalanceRequest.decode(value),
    responseSerialize: (value: BalanceResult) => Buffer.from(BalanceResult.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BalanceResult.decode(value),
  },
  activeBalance: {
    path: "/gamehub.proto.client.service.SessionService/ActiveBalance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ActiveBalanceRequest) => Buffer.from(ActiveBalanceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ActiveBalanceRequest.decode(value),
    responseSerialize: (value: ActiveBalanceResult) => Buffer.from(ActiveBalanceResult.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ActiveBalanceResult.decode(value),
  },
} as const;

export interface SessionServiceServer extends UntypedServiceImplementation {
  authenticate: handleUnaryCall<AuthenticateRequest, AuthenticateResult>;
  balance: handleUnaryCall<BalanceRequest, BalanceResult>;
  activeBalance: handleUnaryCall<ActiveBalanceRequest, ActiveBalanceResult>;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
