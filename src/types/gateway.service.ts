// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.21.12
// source: gateway.service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type handleUnaryCall, Metadata, type UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "gamehub.proto.client.service";

export interface ListGamesRequest {
  $type: "gamehub.proto.client.service.ListGamesRequest";
}

export interface ListGamesResult {
  $type: "gamehub.proto.client.service.ListGamesResult";
  readonly categories?: readonly ListGamesResult_CategoryResult[] | undefined;
  readonly providers?: readonly ListGamesResult_ProviderResult[] | undefined;
  readonly games?: readonly ListGamesResult_GameResult[] | undefined;
}

export interface ListGamesResult_CategoryResult {
  $type: "gamehub.proto.client.service.ListGamesResult.CategoryResult";
  readonly identity?: string | undefined;
  readonly name?: string | undefined;
  readonly images?: { [key: string]: string } | undefined;
}

export interface ListGamesResult_CategoryResult_ImagesEntry {
  $type: "gamehub.proto.client.service.ListGamesResult.CategoryResult.ImagesEntry";
  readonly key: string;
  readonly value: string;
}

export interface ListGamesResult_ProviderResult {
  $type: "gamehub.proto.client.service.ListGamesResult.ProviderResult";
  readonly identity?: string | undefined;
  readonly name?: string | undefined;
  readonly images?: { [key: string]: string } | undefined;
}

export interface ListGamesResult_ProviderResult_ImagesEntry {
  $type: "gamehub.proto.client.service.ListGamesResult.ProviderResult.ImagesEntry";
  readonly key: string;
  readonly value: string;
}

export interface ListGamesResult_GameResult {
  $type: "gamehub.proto.client.service.ListGamesResult.GameResult";
  readonly identity?: string | undefined;
  readonly name?: string | undefined;
  readonly images?: { [key: string]: string } | undefined;
  readonly provider?: string | undefined;
  readonly categories?: readonly string[] | undefined;
  readonly bonusBet?: boolean | undefined;
  readonly bonusWagering?: boolean | undefined;
  readonly supportedLang?: readonly string[] | undefined;
  readonly platforms?: readonly string[] | undefined;
  readonly demoEnable?: boolean | undefined;
  readonly freespinEnable?: boolean | undefined;
  readonly freechipEnable?: boolean | undefined;
  readonly jackpotEnable?: boolean | undefined;
  readonly bonusBuyEnable?: boolean | undefined;
}

export interface ListGamesResult_GameResult_ImagesEntry {
  $type: "gamehub.proto.client.service.ListGamesResult.GameResult.ImagesEntry";
  readonly key: string;
  readonly value: string;
}

export interface FindPresetRequest {
  $type: "gamehub.proto.client.service.FindPresetRequest";
  readonly gameIdentity?: string | undefined;
  readonly currency?: string | undefined;
}

export interface PresetResult {
  $type: "gamehub.proto.client.service.PresetResult";
  readonly id?: string | undefined;
  readonly name?: string | undefined;
  readonly currency?: string | undefined;
  readonly fields?: readonly PresetResult_Field[] | undefined;
}

export interface PresetResult_Field {
  $type: "gamehub.proto.client.service.PresetResult.Field";
  readonly name?: string | undefined;
  readonly value?: number | undefined;
  readonly defaultValue?: number | undefined;
  readonly minValue?: number | undefined;
  readonly maxValue?: number | undefined;
  readonly required?: boolean | undefined;
}

export interface CreateFreeSpinRequest {
  $type: "gamehub.proto.client.service.CreateFreeSpinRequest";
  readonly gameIdentity?: string | undefined;
  readonly playerId?: string | undefined;
  readonly currency?: string | undefined;
  readonly startAt?: Date | undefined;
  readonly expireAt?: Date | undefined;
  readonly referenceId?: string | undefined;
  readonly fields?: { [key: string]: number } | undefined;
}

export interface CreateFreeSpinRequest_Field {
  $type: "gamehub.proto.client.service.CreateFreeSpinRequest.Field";
  readonly name?: string | undefined;
  readonly value?: number | undefined;
}

export interface CreateFreeSpinRequest_FieldsEntry {
  $type: "gamehub.proto.client.service.CreateFreeSpinRequest.FieldsEntry";
  readonly key: string;
  readonly value: number;
}

export interface CancelFreeSpinRequest {
  $type: "gamehub.proto.client.service.CancelFreeSpinRequest";
  readonly referenceId?: string | undefined;
  readonly gameIdentity?: string | undefined;
}

export interface FreeSpinResult {
  $type: "gamehub.proto.client.service.FreeSpinResult";
  readonly referenceId?: string | undefined;
}

export interface CreateSessionRequest {
  $type: "gamehub.proto.client.service.CreateSessionRequest";
  readonly gameIdentity?: string | undefined;
  readonly playerId?: string | undefined;
  readonly token?: string | undefined;
  readonly currency?: string | undefined;
  readonly lobbyUrl?: string | undefined;
  readonly locale?: string | undefined;
  readonly platform?: string | undefined;
  readonly demo?: boolean | undefined;
}

export interface SessionResult {
  $type: "gamehub.proto.client.service.SessionResult";
  readonly gameLaunchUrl?: string | undefined;
}

export const GAMEHUB_PROTO_CLIENT_SERVICE_PACKAGE_NAME = "gamehub.proto.client.service";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

function createBaseListGamesRequest(): ListGamesRequest {
  return { $type: "gamehub.proto.client.service.ListGamesRequest" };
}

export const ListGamesRequest: MessageFns<ListGamesRequest, "gamehub.proto.client.service.ListGamesRequest"> = {
  $type: "gamehub.proto.client.service.ListGamesRequest" as const,

  encode(_: ListGamesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGamesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGamesRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseListGamesResult(): ListGamesResult {
  return { $type: "gamehub.proto.client.service.ListGamesResult" };
}

export const ListGamesResult: MessageFns<ListGamesResult, "gamehub.proto.client.service.ListGamesResult"> = {
  $type: "gamehub.proto.client.service.ListGamesResult" as const,

  encode(message: ListGamesResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.categories !== undefined && message.categories.length !== 0) {
      for (const v of message.categories) {
        ListGamesResult_CategoryResult.encode(v!, writer.uint32(10).fork()).join();
      }
    }
    if (message.providers !== undefined && message.providers.length !== 0) {
      for (const v of message.providers) {
        ListGamesResult_ProviderResult.encode(v!, writer.uint32(18).fork()).join();
      }
    }
    if (message.games !== undefined && message.games.length !== 0) {
      for (const v of message.games) {
        ListGamesResult_GameResult.encode(v!, writer.uint32(26).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGamesResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGamesResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          if (message.categories === undefined) {
            message.categories = [];
          }
          const el = ListGamesResult_CategoryResult.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.categories!.push(el);
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          if (message.providers === undefined) {
            message.providers = [];
          }
          const el = ListGamesResult_ProviderResult.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.providers!.push(el);
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          if (message.games === undefined) {
            message.games = [];
          }
          const el = ListGamesResult_GameResult.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.games!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseListGamesResult_CategoryResult(): ListGamesResult_CategoryResult {
  return { $type: "gamehub.proto.client.service.ListGamesResult.CategoryResult" };
}

export const ListGamesResult_CategoryResult: MessageFns<
  ListGamesResult_CategoryResult,
  "gamehub.proto.client.service.ListGamesResult.CategoryResult"
> = {
  $type: "gamehub.proto.client.service.ListGamesResult.CategoryResult" as const,

  encode(message: ListGamesResult_CategoryResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identity !== undefined && message.identity !== "") {
      writer.uint32(10).string(message.identity);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    Object.entries(message.images || {}).forEach(([key, value]) => {
      ListGamesResult_CategoryResult_ImagesEntry.encode({
        $type: "gamehub.proto.client.service.ListGamesResult.CategoryResult.ImagesEntry",
        key: key as any,
        value,
      }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGamesResult_CategoryResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGamesResult_CategoryResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identity = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = ListGamesResult_CategoryResult_ImagesEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            if (message.images === undefined) {
              message.images = {};
            }
            message.images![entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseListGamesResult_CategoryResult_ImagesEntry(): ListGamesResult_CategoryResult_ImagesEntry {
  return { $type: "gamehub.proto.client.service.ListGamesResult.CategoryResult.ImagesEntry", key: "", value: "" };
}

export const ListGamesResult_CategoryResult_ImagesEntry: MessageFns<
  ListGamesResult_CategoryResult_ImagesEntry,
  "gamehub.proto.client.service.ListGamesResult.CategoryResult.ImagesEntry"
> = {
  $type: "gamehub.proto.client.service.ListGamesResult.CategoryResult.ImagesEntry" as const,

  encode(message: ListGamesResult_CategoryResult_ImagesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGamesResult_CategoryResult_ImagesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGamesResult_CategoryResult_ImagesEntry() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseListGamesResult_ProviderResult(): ListGamesResult_ProviderResult {
  return { $type: "gamehub.proto.client.service.ListGamesResult.ProviderResult" };
}

export const ListGamesResult_ProviderResult: MessageFns<
  ListGamesResult_ProviderResult,
  "gamehub.proto.client.service.ListGamesResult.ProviderResult"
> = {
  $type: "gamehub.proto.client.service.ListGamesResult.ProviderResult" as const,

  encode(message: ListGamesResult_ProviderResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identity !== undefined && message.identity !== "") {
      writer.uint32(10).string(message.identity);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    Object.entries(message.images || {}).forEach(([key, value]) => {
      ListGamesResult_ProviderResult_ImagesEntry.encode({
        $type: "gamehub.proto.client.service.ListGamesResult.ProviderResult.ImagesEntry",
        key: key as any,
        value,
      }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGamesResult_ProviderResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGamesResult_ProviderResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identity = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = ListGamesResult_ProviderResult_ImagesEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            if (message.images === undefined) {
              message.images = {};
            }
            message.images![entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseListGamesResult_ProviderResult_ImagesEntry(): ListGamesResult_ProviderResult_ImagesEntry {
  return { $type: "gamehub.proto.client.service.ListGamesResult.ProviderResult.ImagesEntry", key: "", value: "" };
}

export const ListGamesResult_ProviderResult_ImagesEntry: MessageFns<
  ListGamesResult_ProviderResult_ImagesEntry,
  "gamehub.proto.client.service.ListGamesResult.ProviderResult.ImagesEntry"
> = {
  $type: "gamehub.proto.client.service.ListGamesResult.ProviderResult.ImagesEntry" as const,

  encode(message: ListGamesResult_ProviderResult_ImagesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGamesResult_ProviderResult_ImagesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGamesResult_ProviderResult_ImagesEntry() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseListGamesResult_GameResult(): ListGamesResult_GameResult {
  return { $type: "gamehub.proto.client.service.ListGamesResult.GameResult" };
}

export const ListGamesResult_GameResult: MessageFns<
  ListGamesResult_GameResult,
  "gamehub.proto.client.service.ListGamesResult.GameResult"
> = {
  $type: "gamehub.proto.client.service.ListGamesResult.GameResult" as const,

  encode(message: ListGamesResult_GameResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identity !== undefined && message.identity !== "") {
      writer.uint32(10).string(message.identity);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    Object.entries(message.images || {}).forEach(([key, value]) => {
      ListGamesResult_GameResult_ImagesEntry.encode({
        $type: "gamehub.proto.client.service.ListGamesResult.GameResult.ImagesEntry",
        key: key as any,
        value,
      }, writer.uint32(26).fork()).join();
    });
    if (message.provider !== undefined && message.provider !== "") {
      writer.uint32(34).string(message.provider);
    }
    if (message.categories !== undefined && message.categories.length !== 0) {
      for (const v of message.categories) {
        writer.uint32(42).string(v!);
      }
    }
    if (message.bonusBet !== undefined && message.bonusBet !== false) {
      writer.uint32(48).bool(message.bonusBet);
    }
    if (message.bonusWagering !== undefined && message.bonusWagering !== false) {
      writer.uint32(56).bool(message.bonusWagering);
    }
    if (message.supportedLang !== undefined && message.supportedLang.length !== 0) {
      for (const v of message.supportedLang) {
        writer.uint32(66).string(v!);
      }
    }
    if (message.platforms !== undefined && message.platforms.length !== 0) {
      for (const v of message.platforms) {
        writer.uint32(74).string(v!);
      }
    }
    if (message.demoEnable !== undefined && message.demoEnable !== false) {
      writer.uint32(80).bool(message.demoEnable);
    }
    if (message.freespinEnable !== undefined && message.freespinEnable !== false) {
      writer.uint32(88).bool(message.freespinEnable);
    }
    if (message.freechipEnable !== undefined && message.freechipEnable !== false) {
      writer.uint32(96).bool(message.freechipEnable);
    }
    if (message.jackpotEnable !== undefined && message.jackpotEnable !== false) {
      writer.uint32(104).bool(message.jackpotEnable);
    }
    if (message.bonusBuyEnable !== undefined && message.bonusBuyEnable !== false) {
      writer.uint32(112).bool(message.bonusBuyEnable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGamesResult_GameResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGamesResult_GameResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identity = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = ListGamesResult_GameResult_ImagesEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            if (message.images === undefined) {
              message.images = {};
            }
            message.images![entry3.key] = entry3.value;
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.provider = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          if (message.categories === undefined) {
            message.categories = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.categories!.push(el);
          }
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.bonusBet = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.bonusWagering = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          if (message.supportedLang === undefined) {
            message.supportedLang = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.supportedLang!.push(el);
          }
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          if (message.platforms === undefined) {
            message.platforms = [];
          }
          const el = reader.string();
          if (el !== undefined) {
            message.platforms!.push(el);
          }
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.demoEnable = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.freespinEnable = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.freechipEnable = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.jackpotEnable = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.bonusBuyEnable = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseListGamesResult_GameResult_ImagesEntry(): ListGamesResult_GameResult_ImagesEntry {
  return { $type: "gamehub.proto.client.service.ListGamesResult.GameResult.ImagesEntry", key: "", value: "" };
}

export const ListGamesResult_GameResult_ImagesEntry: MessageFns<
  ListGamesResult_GameResult_ImagesEntry,
  "gamehub.proto.client.service.ListGamesResult.GameResult.ImagesEntry"
> = {
  $type: "gamehub.proto.client.service.ListGamesResult.GameResult.ImagesEntry" as const,

  encode(message: ListGamesResult_GameResult_ImagesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListGamesResult_GameResult_ImagesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListGamesResult_GameResult_ImagesEntry() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseFindPresetRequest(): FindPresetRequest {
  return { $type: "gamehub.proto.client.service.FindPresetRequest" };
}

export const FindPresetRequest: MessageFns<FindPresetRequest, "gamehub.proto.client.service.FindPresetRequest"> = {
  $type: "gamehub.proto.client.service.FindPresetRequest" as const,

  encode(message: FindPresetRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameIdentity !== undefined && message.gameIdentity !== "") {
      writer.uint32(10).string(message.gameIdentity);
    }
    if (message.currency !== undefined && message.currency !== "") {
      writer.uint32(18).string(message.currency);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindPresetRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindPresetRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameIdentity = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBasePresetResult(): PresetResult {
  return { $type: "gamehub.proto.client.service.PresetResult" };
}

export const PresetResult: MessageFns<PresetResult, "gamehub.proto.client.service.PresetResult"> = {
  $type: "gamehub.proto.client.service.PresetResult" as const,

  encode(message: PresetResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined && message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.currency !== undefined && message.currency !== "") {
      writer.uint32(26).string(message.currency);
    }
    if (message.fields !== undefined && message.fields.length !== 0) {
      for (const v of message.fields) {
        PresetResult_Field.encode(v!, writer.uint32(34).fork()).join();
      }
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PresetResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePresetResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          if (message.fields === undefined) {
            message.fields = [];
          }
          const el = PresetResult_Field.decode(reader, reader.uint32());
          if (el !== undefined) {
            message.fields!.push(el);
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBasePresetResult_Field(): PresetResult_Field {
  return { $type: "gamehub.proto.client.service.PresetResult.Field" };
}

export const PresetResult_Field: MessageFns<PresetResult_Field, "gamehub.proto.client.service.PresetResult.Field"> = {
  $type: "gamehub.proto.client.service.PresetResult.Field" as const,

  encode(message: PresetResult_Field, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== undefined) {
      writer.uint32(16).int32(message.value);
    }
    if (message.defaultValue !== undefined) {
      writer.uint32(24).int32(message.defaultValue);
    }
    if (message.minValue !== undefined) {
      writer.uint32(32).int32(message.minValue);
    }
    if (message.maxValue !== undefined) {
      writer.uint32(40).int32(message.maxValue);
    }
    if (message.required !== undefined && message.required !== false) {
      writer.uint32(48).bool(message.required);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PresetResult_Field {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePresetResult_Field() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.defaultValue = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.minValue = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.maxValue = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.required = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateFreeSpinRequest(): CreateFreeSpinRequest {
  return { $type: "gamehub.proto.client.service.CreateFreeSpinRequest" };
}

export const CreateFreeSpinRequest: MessageFns<
  CreateFreeSpinRequest,
  "gamehub.proto.client.service.CreateFreeSpinRequest"
> = {
  $type: "gamehub.proto.client.service.CreateFreeSpinRequest" as const,

  encode(message: CreateFreeSpinRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameIdentity !== undefined && message.gameIdentity !== "") {
      writer.uint32(10).string(message.gameIdentity);
    }
    if (message.playerId !== undefined && message.playerId !== "") {
      writer.uint32(18).string(message.playerId);
    }
    if (message.currency !== undefined && message.currency !== "") {
      writer.uint32(26).string(message.currency);
    }
    if (message.startAt !== undefined) {
      Timestamp.encode(toTimestamp(message.startAt), writer.uint32(34).fork()).join();
    }
    if (message.expireAt !== undefined) {
      Timestamp.encode(toTimestamp(message.expireAt), writer.uint32(42).fork()).join();
    }
    if (message.referenceId !== undefined && message.referenceId !== "") {
      writer.uint32(50).string(message.referenceId);
    }
    Object.entries(message.fields || {}).forEach(([key, value]) => {
      CreateFreeSpinRequest_FieldsEntry.encode({
        $type: "gamehub.proto.client.service.CreateFreeSpinRequest.FieldsEntry",
        key: key as any,
        value,
      }, writer.uint32(58).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFreeSpinRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFreeSpinRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameIdentity = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.startAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.expireAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.referenceId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = CreateFreeSpinRequest_FieldsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            if (message.fields === undefined) {
              message.fields = {};
            }
            message.fields![entry7.key] = entry7.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateFreeSpinRequest_Field(): CreateFreeSpinRequest_Field {
  return { $type: "gamehub.proto.client.service.CreateFreeSpinRequest.Field" };
}

export const CreateFreeSpinRequest_Field: MessageFns<
  CreateFreeSpinRequest_Field,
  "gamehub.proto.client.service.CreateFreeSpinRequest.Field"
> = {
  $type: "gamehub.proto.client.service.CreateFreeSpinRequest.Field" as const,

  encode(message: CreateFreeSpinRequest_Field, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== undefined && message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFreeSpinRequest_Field {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFreeSpinRequest_Field() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateFreeSpinRequest_FieldsEntry(): CreateFreeSpinRequest_FieldsEntry {
  return { $type: "gamehub.proto.client.service.CreateFreeSpinRequest.FieldsEntry", key: "", value: 0 };
}

export const CreateFreeSpinRequest_FieldsEntry: MessageFns<
  CreateFreeSpinRequest_FieldsEntry,
  "gamehub.proto.client.service.CreateFreeSpinRequest.FieldsEntry"
> = {
  $type: "gamehub.proto.client.service.CreateFreeSpinRequest.FieldsEntry" as const,

  encode(message: CreateFreeSpinRequest_FieldsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).int32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateFreeSpinRequest_FieldsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateFreeSpinRequest_FieldsEntry() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCancelFreeSpinRequest(): CancelFreeSpinRequest {
  return { $type: "gamehub.proto.client.service.CancelFreeSpinRequest" };
}

export const CancelFreeSpinRequest: MessageFns<
  CancelFreeSpinRequest,
  "gamehub.proto.client.service.CancelFreeSpinRequest"
> = {
  $type: "gamehub.proto.client.service.CancelFreeSpinRequest" as const,

  encode(message: CancelFreeSpinRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referenceId !== undefined && message.referenceId !== "") {
      writer.uint32(10).string(message.referenceId);
    }
    if (message.gameIdentity !== undefined && message.gameIdentity !== "") {
      writer.uint32(18).string(message.gameIdentity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CancelFreeSpinRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelFreeSpinRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referenceId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameIdentity = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseFreeSpinResult(): FreeSpinResult {
  return { $type: "gamehub.proto.client.service.FreeSpinResult" };
}

export const FreeSpinResult: MessageFns<FreeSpinResult, "gamehub.proto.client.service.FreeSpinResult"> = {
  $type: "gamehub.proto.client.service.FreeSpinResult" as const,

  encode(message: FreeSpinResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.referenceId !== undefined && message.referenceId !== "") {
      writer.uint32(10).string(message.referenceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FreeSpinResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFreeSpinResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.referenceId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseCreateSessionRequest(): CreateSessionRequest {
  return { $type: "gamehub.proto.client.service.CreateSessionRequest" };
}

export const CreateSessionRequest: MessageFns<
  CreateSessionRequest,
  "gamehub.proto.client.service.CreateSessionRequest"
> = {
  $type: "gamehub.proto.client.service.CreateSessionRequest" as const,

  encode(message: CreateSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameIdentity !== undefined && message.gameIdentity !== "") {
      writer.uint32(10).string(message.gameIdentity);
    }
    if (message.playerId !== undefined) {
      writer.uint32(18).string(message.playerId);
    }
    if (message.token !== undefined && message.token !== "") {
      writer.uint32(26).string(message.token);
    }
    if (message.currency !== undefined && message.currency !== "") {
      writer.uint32(34).string(message.currency);
    }
    if (message.lobbyUrl !== undefined && message.lobbyUrl !== "") {
      writer.uint32(42).string(message.lobbyUrl);
    }
    if (message.locale !== undefined && message.locale !== "") {
      writer.uint32(50).string(message.locale);
    }
    if (message.platform !== undefined && message.platform !== "") {
      writer.uint32(58).string(message.platform);
    }
    if (message.demo !== undefined && message.demo !== false) {
      writer.uint32(64).bool(message.demo);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSessionRequest() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameIdentity = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.currency = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.lobbyUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.locale = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.platform = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.demo = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseSessionResult(): SessionResult {
  return { $type: "gamehub.proto.client.service.SessionResult" };
}

export const SessionResult: MessageFns<SessionResult, "gamehub.proto.client.service.SessionResult"> = {
  $type: "gamehub.proto.client.service.SessionResult" as const,

  encode(message: SessionResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameLaunchUrl !== undefined && message.gameLaunchUrl !== "") {
      writer.uint32(10).string(message.gameLaunchUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SessionResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSessionResult() as any;
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gameLaunchUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface GameServiceClient {
  listGamesAll(request: ListGamesRequest, metadata: Metadata, ...rest: any): Observable<ListGamesResult>;

  findPreset(request: FindPresetRequest, metadata: Metadata, ...rest: any): Observable<PresetResult>;

  createSession(request: CreateSessionRequest, metadata: Metadata, ...rest: any): Observable<SessionResult>;

  createFreeSpin(request: CreateFreeSpinRequest, metadata: Metadata, ...rest: any): Observable<FreeSpinResult>;

  cancelFreeSpin(request: CancelFreeSpinRequest, metadata: Metadata, ...rest: any): Observable<FreeSpinResult>;
}

export interface GameServiceController {
  listGamesAll(
    request: ListGamesRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<ListGamesResult> | Observable<ListGamesResult> | ListGamesResult;

  findPreset(
    request: FindPresetRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<PresetResult> | Observable<PresetResult> | PresetResult;

  createSession(
    request: CreateSessionRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<SessionResult> | Observable<SessionResult> | SessionResult;

  createFreeSpin(
    request: CreateFreeSpinRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<FreeSpinResult> | Observable<FreeSpinResult> | FreeSpinResult;

  cancelFreeSpin(
    request: CancelFreeSpinRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<FreeSpinResult> | Observable<FreeSpinResult> | FreeSpinResult;
}

export function GameServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["listGamesAll", "findPreset", "createSession", "createFreeSpin", "cancelFreeSpin"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("GameService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("GameService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const GAME_SERVICE_NAME = "GameService";

export type GameServiceService = typeof GameServiceService;
export const GameServiceService = {
  listGamesAll: {
    path: "/gamehub.proto.client.service.GameService/ListGamesAll",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListGamesRequest) => Buffer.from(ListGamesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListGamesRequest.decode(value),
    responseSerialize: (value: ListGamesResult) => Buffer.from(ListGamesResult.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListGamesResult.decode(value),
  },
  findPreset: {
    path: "/gamehub.proto.client.service.GameService/FindPreset",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindPresetRequest) => Buffer.from(FindPresetRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindPresetRequest.decode(value),
    responseSerialize: (value: PresetResult) => Buffer.from(PresetResult.encode(value).finish()),
    responseDeserialize: (value: Buffer) => PresetResult.decode(value),
  },
  createSession: {
    path: "/gamehub.proto.client.service.GameService/CreateSession",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateSessionRequest) => Buffer.from(CreateSessionRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateSessionRequest.decode(value),
    responseSerialize: (value: SessionResult) => Buffer.from(SessionResult.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SessionResult.decode(value),
  },
  createFreeSpin: {
    path: "/gamehub.proto.client.service.GameService/CreateFreeSpin",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateFreeSpinRequest) => Buffer.from(CreateFreeSpinRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateFreeSpinRequest.decode(value),
    responseSerialize: (value: FreeSpinResult) => Buffer.from(FreeSpinResult.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FreeSpinResult.decode(value),
  },
  cancelFreeSpin: {
    path: "/gamehub.proto.client.service.GameService/CancelFreeSpin",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CancelFreeSpinRequest) => Buffer.from(CancelFreeSpinRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CancelFreeSpinRequest.decode(value),
    responseSerialize: (value: FreeSpinResult) => Buffer.from(FreeSpinResult.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FreeSpinResult.decode(value),
  },
} as const;

export interface GameServiceServer extends UntypedServiceImplementation {
  listGamesAll: handleUnaryCall<ListGamesRequest, ListGamesResult>;
  findPreset: handleUnaryCall<FindPresetRequest, PresetResult>;
  createSession: handleUnaryCall<CreateSessionRequest, SessionResult>;
  createFreeSpin: handleUnaryCall<CreateFreeSpinRequest, FreeSpinResult>;
  cancelFreeSpin: handleUnaryCall<CancelFreeSpinRequest, FreeSpinResult>;
}

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { $type: "google.protobuf.Timestamp", seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
