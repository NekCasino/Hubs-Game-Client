import * as fs from 'fs';
import * as path from 'path';
import { glob } from 'glob';

// –ü—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º TypeScript —Ñ–∞–π–ª–∞–º
const TYPES_DIR = path.resolve(__dirname, '../src/types');
// –ü—É—Ç—å, –∫—É–¥–∞ –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
const SERVICES_DIR = path.resolve(__dirname, '../src/services');

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ —Ñ–∞–π–ª–∞
 */
function getServiceConstantName(content: string, serviceName: string): string {
  // –ü–æ–∏—Å–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–∏—Å–∞
  const constantRegex = new RegExp(`export const ([A-Z_]+) = "${serviceName}"`);
  const match = content.match(constantRegex);
  return match ? match[1] : `${serviceName.toUpperCase()}_SERVICE_NAME`;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
 */
function extractTypes(content: string): string[] {
  const typeRegex = /export (interface|enum|type) (\w+)/g;
  const types: string[] = [];
  const uniqueTypes = new Set<string>();
  let match;
  
  while ((match = typeRegex.exec(content)) !== null) {
    const typeName = match[2];
    if (!uniqueTypes.has(typeName)) {
      uniqueTypes.add(typeName);
      types.push(typeName);
    }
  }
  
  return types;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç service-–∫–ª–∞—Å—Å –¥–ª—è gRPC –∫–ª–∏–µ–Ω—Ç–∞
 */
async function generateServiceClass(protoFile: string) {
  // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏
  const content = fs.readFileSync(protoFile, 'utf-8');
  
  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–µ—Ä–≤–∏—Å–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
  const fileName = path.basename(protoFile);
  const baseFileName = fileName.replace('.service.ts', '').replace('.types.ts', '');
  
  // –ü–æ–∏—Å–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ *ServiceClient
  const clientInterfaceMatch = content.match(/export interface (\w+Client)/);
  if (!clientInterfaceMatch) return;
  
  const clientInterface = clientInterfaceMatch[1];
  const serviceName = clientInterface.replace('Client', '');
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–µ—Ä–≤–∏—Å–∞
  const serviceConstant = getServiceConstantName(content, serviceName);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã
  const allTypes = extractTypes(content).filter(t => t !== clientInterface);
  
  // –ü–æ–∏—Å–∫ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
  const clientMethods: string[] = [];
  const methodRegex = /(\w+)\(request: (\w+), metadata: Metadata, \.\.\.rest: any\): Observable<(\w+)>/g;
  let match;
  
  while ((match = methodRegex.exec(content)) !== null) {
    clientMethods.push(`
  /**
   * ${match[1]} - –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ gRPC ${match[1]}
   * @param request - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ —Ç–∏–ø–∞ ${match[2]}
   * @param metadata - gRPC metadata (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
   * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–∏–ø–∞ ${match[3]}
   */
  async ${match[1]}(request: ${match[2]}, metadata?: Metadata): Promise<${match[3]}> {
    const grpcMetadata = metadata || new Metadata();
    return firstValueFrom(this.service.${match[1]}(request, grpcMetadata));
  }`);
  }
  
  // –ï—Å–ª–∏ –º–µ—Ç–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª
  if (clientMethods.length === 0) return;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è —Ç–∏–ø–æ–≤
  const importFileName = `${baseFileName}.types`;
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ service-–∫–ª–∞—Å—Å–∞
  const serviceClassTemplate = `import { Injectable, OnModuleInit } from '@nestjs/common';
import { ClientGrpc } from '@nestjs/microservices';
import { Metadata } from '@grpc/grpc-js';
import { firstValueFrom } from 'rxjs';
import { 
  ${clientInterface},
  ${serviceConstant},
  ${allTypes.join(',\n  ')}
} from '../types/${importFileName}';

/**
 * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å-–∫–ª–∏–µ–Ω—Ç –¥–ª—è ${serviceName}
 */
@Injectable()
export class ${serviceName}ClientService implements OnModuleInit {
  private service!: ${clientInterface};

  constructor(
    private readonly client: ClientGrpc,
  ) {}

  onModuleInit() {
    this.service = this.client.getService<${clientInterface}>(${serviceConstant});
  }
${clientMethods.join('\n')}
}
`;

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(SERVICES_DIR)) {
    fs.mkdirSync(SERVICES_DIR, { recursive: true });
  }

  // –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
  const outputFile = path.join(SERVICES_DIR, `${baseFileName}.service.ts`);
  fs.writeFileSync(outputFile, serviceClassTemplate);
  console.log(`‚úÖ Generated service: ${outputFile}`);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç index.ts —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */
function generateServicesIndex(serviceFiles: string[]) {
  const imports: string[] = [];
  const exports: string[] = [];
  
  serviceFiles.forEach(file => {
    const fileName = path.basename(file, '.ts');
    const matches = fileName.match(/(.+)\.service$/);
    if (!matches) return;
    
    const baseFileName = matches[1];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    const serviceName = baseFileName.split('.')[0];
    const serviceClass = `${serviceName.charAt(0).toUpperCase() + serviceName.slice(1)}ServiceClientService`;
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞
    const serviceContent = fs.readFileSync(file, 'utf-8');
    const classNameMatch = serviceContent.match(/export class (\w+ClientService)/);
    const className = classNameMatch ? classNameMatch[1] : serviceClass;
    
    imports.push(`import { ${className} } from './${fileName}';`);
    exports.push(`  ${className},`);
  });
  
  const indexContent = `${imports.join('\n')}

export {
${exports.join('\n')}
};
`;
  
  fs.writeFileSync(path.join(SERVICES_DIR, 'index.ts'), indexContent);
  console.log('‚úÖ Generated services index.ts');
}

async function main() {
  console.log('üîç Searching for generated service files...');
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (.types.ts)
  const files = glob.sync(`${TYPES_DIR}/**/*.types.ts`);
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Å–µ—Ä–≤–∏—Å—ã
  const serviceFiles = files.filter(file => {
    const content = fs.readFileSync(file, 'utf-8');
    return content.includes('ServiceClient') && !file.includes('google/protobuf');
  });
  
  console.log(`üîç Found ${serviceFiles.length} service files`);
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
  for (const file of serviceFiles) {
    await generateServiceClass(file);
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  const generatedServices = glob.sync(`${SERVICES_DIR}/**/*.service.ts`);
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  generateServicesIndex(generatedServices);
  
  console.log('‚úÖ Service generation completed!');
}

main().catch(err => {
  console.error('‚ùå Error generating services:', err);
  process.exit(1);
}); 